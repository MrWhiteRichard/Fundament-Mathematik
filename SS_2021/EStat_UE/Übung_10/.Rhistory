demo()
help.start()
3 +       5   # R ignores spacing, 5+5 equals 5   +     5
2 ^ 3
4 / 7         # Division by "/" (not ":")
4 * 2 + 3
4 * (2 + 3)   # R accounts for brackets
3.3 * 2       # Attention, the decimal marker is a point (not comma)
3 / 0         # that's the way it is ;-)...
Inf - 3
Inf - Inf     # NaN = not a number (undefined value)
5 == 4        # "==" equals, logical values are either "TRUE" or "FALSE"
5 >= 4        # ">=" larger or equals, analogously: ">", "<", "<="
5 != 4        # "!=" not equals
is.numeric(pi)
is.character("hello")
is.character(3^7)
c(1,2,4)
data_arr = c(186, 181, 176, 149,184,190,158,139,175,148,152,111,141,153,190,157,131,149,135,132)
X_bar = mean(data_arr)
data_arr = c(186, 181, 176, 149,184,190,158,139,175,148,152,111,141,153,190,157,131,149,135,132)
n = length(data_arr)
X_bar = mean(data_arr)
S = sqrt((1/1-n)*sum((X_bar-data_arr)^2))
data_arr = c(186, 181, 176, 149,184,190,158,139,175,148,152,111,141,153,190,157,131,149,135,132)
n = length(data_arr)
X_bar = mean(data_arr)
S = sqrt((1/1-n)*sum((data_arr-X_bar)^2))
data_arr = c(186, 181, 176, 149,184,190,158,139,175,148,152,111,141,153,190,157,131,149,135,132)
n = length(data_arr)
X_bar = mean(data_arr)
print(sum(data_arr - 1))
S = sqrt((1/1-n)*sum((data_arr-X_bar)^2))
data_arr = c(186, 181, 176, 149,184,190,158,139,175,148,152,111,141,153,190,157,131,149,135,132)
n = length(data_arr)
X_bar = mean(data_arr)
print(sum(c(1,1,1,1,1,1) - 1))
S = sqrt((1/1-n)*sum((data_arr-X_bar)^2))
data_arr = c(186, 181, 176, 149,184,190,158,139,175,148,152,111,141,153,190,157,131,149,135,132)
n = length(data_arr)
X_bar = mean(data_arr)
S = sqrt((1/1-n)*sum((data_arr-X_bar)^2))
data_arr = c(186, 181, 176, 149,184,190,158,139,175,148,152,111,141,153,190,157,131,149,135,132)
n = length(data_arr)
X_bar = mean(data_arr)
S = sqrt((1/1-n)*sum((data_arr-X_bar)^2))
print(S)
data_arr = c(186, 181, 176, 149,184,190,158,139,175,148,152,111,141,153,190,157,131,149,135,132)
n = length(data_arr)
X_bar = mean(data_arr)
S = sqrt((1/n-1)*sum((data_arr-X_bar)^2))
print(S)
data_arr = c(186, 181, 176, 149,184,190,158,139,175,148,152,111,141,153,190,157,131,149,135,132)
n = length(data_arr)
X_bar = mean(data_arr)
S = sqrt((1/n-1)*sum((data_arr-X_bar)^2))
print(n)
data_arr = c(186, 181, 176, 149,184,190,158,139,175,148,152,111,141,153,190,157,131,149,135,132)
n = length(data_arr)
X_bar = mean(data_arr)
S = sum((data_arr-X_bar)^2)
print(S)
data_arr = c(186, 181, 176, 149,184,190,158,139,175,148,152,111,141,153,190,157,131,149,135,132)
n = length(data_arr)
X_bar = mean(data_arr)
S = sqrt(sum((data_arr-X_bar)^2)*(1/n-1))
print(S)
data_arr = c(186, 181, 176, 149,184,190,158,139,175,148,152,111,141,153,190,157,131,149,135,132)
n = length(data_arr)
X_bar = mean(data_arr)
S = sum((data_arr-X_bar)^2)*(1/n-1)
print(S)
data_arr = c(186, 181, 176, 149,184,190,158,139,175,148,152,111,141,153,190,157,131,149,135,132)
n = length(data_arr)
X_bar = mean(data_arr)
S = sum((data_arr-X_bar)^2)
print(S)
data_arr = c(186, 181, 176, 149,184,190,158,139,175,148,152,111,141,153,190,157,131,149,135,132)
n = length(data_arr)
X_bar = mean(data_arr)
S = sqrt(sum((data_arr-X_bar)^2)*(1/(n-1)))
print(S)
data_arr = c(186, 181, 176, 149,184,190,158,139,175,148,152,111,141,153,190,157,131,149,135,132)
n = length(data_arr)
X_bar = mean(data_arr)
S = sqrt(sum((data_arr-X_bar)^2)*(1/(n-1)))
t_alpha = qt(0.05,n-1)
lower_bound = X_bar - t_alpha*S/sqrt(n)
upper_bound = X_bar + t_alpha*S/sqrt(n)
paste("CI = [",lower_bound,",",upper_bound,"]")
data_arr = c(186, 181, 176, 149,184,190,158,139,175,148,152,111,141,153,190,157,131,149,135,132)
n = length(data_arr)
X_bar = mean(data_arr)
S = sqrt(sum((data_arr-X_bar)^2)*(1/(n-1)))
t_alpha = qt(0.05,n-1)
lower_bound = X_bar + t_alpha*S/sqrt(n)
upper_bound = X_bar - t_alpha*S/sqrt(n)
paste("CI = [",lower_bound,",",upper_bound,"]")
#Put the data into an array
data_arr = c(186, 181, 176, 149,184,190,158,139,175,148,152,111,141,153,190,157,131,149,135,132)
#n is the number of observations
n = length(data_arr)
#Calculate the mean
X_bar = mean(data_arr)
#Calculate our estimation for the variance, the subtraction in the sum happens element-wise
S = sqrt(sum((data_arr-X_bar)^2)*(1/(n-1)))
#The 1 - alpha/2 quantile of the t distribution with n-1 degrees of freedom
t_alpha = qt(1 - 0.05,n-1)
#Calculate the bounds of the CI and print them
lower_bound = X_bar - t_alpha*S/sqrt(n)
upper_bound = X_bar + t_alpha*S/sqrt(n)
paste("CI = [",lower_bound,",",upper_bound,"]")
#Put the data into an array
data_arr = c(186, 181, 176, 149,184,190,158,139,175,148,152,111,141,153,190,157,131,149,135,132)
#n is the number of observations
n = length(data_arr)
#Calculate the mean
X_bar = mean(data_arr)
#Calculate our estimation for the variance, the subtraction in the sum happens element-wise
S = sqrt(sum((data_arr-X_bar)^2)*(1/(n-1)))
#The 1 - alpha/2 quantile of the t distribution with n-1 degrees of freedom
t_alpha = qt(1 - 0.05,n-1)
#Calculate the bounds of the CI and print them
lower_bound = X_bar - t_alpha*S/sqrt(n)
upper_bound = X_bar + t_alpha*S/sqrt(n)
paste("CI = [",lower_bound,",",upper_bound,"]")
n_1 = 30
n_2 = 100
check_value = function(n,lamba = 1){
c_sample = rpois(n,lambda)
X_bar = mean(c_sample)
z_alpha = qnorm(1-0.05)
upper_bound = X_bar - z_alpha*sqrt(X_bar/n)
lower_bound = X_bar + z_alpha*sqrt(X_bar/n)
if(lambda <= upper_bound){
if(lambda >= lower_bound){
return(1)
}
else{
return(0)
}
}
else{
return(0)
}
}
print(sum(replicate(10000,check_value(n_1))))
n_1 = 30
n_2 = 100
check_value = function(n,lambda = 1){
c_sample = rpois(n,lambda)
X_bar = mean(c_sample)
z_alpha = qnorm(1-0.05)
upper_bound = X_bar - z_alpha*sqrt(X_bar/n)
lower_bound = X_bar + z_alpha*sqrt(X_bar/n)
if(lambda <= upper_bound){
if(lambda >= lower_bound){
return(1)
}
else{
return(0)
}
}
else{
return(0)
}
}
print(sum(replicate(10000,check_value(n_1))))
n_1 = 30
n_2 = 100
check_value = function(n,lambda = 1){
c_sample = rpois(n,lambda)
X_bar = mean(c_sample)
z_alpha = qnorm(1-0.05)
upper_bound = X_bar - z_alpha*sqrt(X_bar/n)
lower_bound = X_bar + z_alpha*sqrt(X_bar/n)
if(lambda <= upper_bound){
if(lambda >= lower_bound){
return(1)
}
else{
return(0)
}
}
else{
return(0)
}
}
print(sum(replicate(10000,check_value(n_1))))
print((sum(replicate(10000,check_value(n_2))))
n_1 = 30
n_2 = 100
check_value = function(n,lambda = 1){
c_sample = rpois(n,lambda)
X_bar = mean(c_sample)
z_alpha = qnorm(1-0.05)
upper_bound = X_bar - z_alpha*sqrt(X_bar/n)
lower_bound = X_bar + z_alpha*sqrt(X_bar/n)
if(lambda <= upper_bound){
if(lambda >= lower_bound){
return(1)
}
else{
return(0)
}
}
else{
return(0)
}
}
print(sum(replicate(10000,check_value(n_1))))
print(sum(replicate(10000,check_value(n_2))))
n_1 = 30
n_2 = 100
check_value = function(n,lambda = 1){
c_sample = rpois(n,lambda)
X_bar = mean(c_sample)
z_alpha = qnorm(1-0.05)
upper_bound = X_bar - z_alpha*sqrt(X_bar/n)
lower_bound = X_bar + z_alpha*sqrt(X_bar/n)
paste("90% CI = [",lower_bound,",",upper_bound,"]")
if(lambda <= upper_bound){
if(lambda >= lower_bound){
return(1)
}
else{
return(0)
}
}
else{
return(0)
}
}
print(sum(replicate(100,check_value(n_1))))
print(sum(replicate(100,check_value(n_2))))
n_1 = 30
n_2 = 100
check_value = function(n,lambda = 1){
c_sample = rpois(n,lambda)
X_bar = mean(c_sample)
z_alpha = qnorm(1-0.05)
upper_bound = X_bar - z_alpha*sqrt(X_bar/n)
lower_bound = X_bar + z_alpha*sqrt(X_bar/n)
print(paste("90% CI = [",lower_bound,",",upper_bound,"]"))
if(lambda <= upper_bound){
if(lambda >= lower_bound){
return(1)
}
else{
return(0)
}
}
else{
return(0)
}
}
print(sum(replicate(100,check_value(n_1))))
print(sum(replicate(100,check_value(n_2))))
n_1 = 30
n_2 = 100
check_value = function(n,lambda = 1){
c_sample = rpois(n,lambda)
X_bar = mean(c_sample)
z_alpha = qnorm(1-0.05)
lower_bound = X_bar - z_alpha*sqrt(X_bar/n)
upper_bound = X_bar + z_alpha*sqrt(X_bar/n)
if(lambda <= upper_bound){
if(lambda >= lower_bound){
return(1)
}
else{
return(0)
}
}
else{
return(0)
}
}
print(sum(replicate(100,check_value(n_1))))
print(sum(replicate(100,check_value(n_2))))
n_1 = 30
n_2 = 100
check_value = function(n,lambda = 1){
c_sample = rpois(n,lambda)
X_bar = mean(c_sample)
z_alpha = qnorm(1-0.05)
lower_bound = X_bar - z_alpha*sqrt(X_bar/n)
upper_bound = X_bar + z_alpha*sqrt(X_bar/n)
if(lambda <= upper_bound){
if(lambda >= lower_bound){
return(1)
}
else{
return(0)
}
}
else{
return(0)
}
}
print(sum(replicate(10000,check_value(n_1))))
print(sum(replicate(10000,check_value(n_2))))
n_1 = 30
n_2 = 100
#Create a random n Pois(lambda) sample, compute the 90% confidence
#interval for lambda, returns 1 if the confidence interval contains
#lambda and 0 otherwise
check_value = function(n,lambda = 1){
c_sample = rpois(n,lambda)
X_bar = mean(c_sample)
z_alpha = qnorm(1-0.05)
lower_bound = X_bar - z_alpha*sqrt(X_bar/n)
upper_bound = X_bar + z_alpha*sqrt(X_bar/n)
if(lambda <= upper_bound){
if(lambda >= lower_bound){
return(1)
}
else{
return(0)
}
}
else{
return(0)
}
}
print(sum(replicate(10000,check_value(n_1))))
print(sum(replicate(10000,check_value(n_2))))
setwd("~/Fundament-Mathematik/SS_2021/EStat_UE/Übung_10/Christian_S")
load(algorithms.Rdata)
load(algorithms.Rdata)
setwd("~/Fundament-Mathematik/SS_2021/EStat_UE/Übung_10")
load(algorithms.Rdata)
load("algorithms.Rdata")
runtimes = ("algorithms.Rdata")
runtimes = ("algorithms.Rdata")
print(runtimes)
runtimes = load("algorithms.Rdata")
print(runtimes)
runtimes = load("algorithms.Rdata")
print(runtimes)
runtimes = load("algorithms.Rdata")
print(runtimes.A)
runtimes = load("algorithms.Rdata")
runtimes
runtimes = load("algorithms.Rdata")
runtimes
boxplot(runtimes)
runtimes = load("algorithms.Rdata")
runtimes
boxplot(~g1 + g2, data = runtimes)
runtimes = load("algorithms.Rdata")
runtimes
boxplot(y ~ grp, data = runtimes)
calories <-
c(
186,
181,
176,
149,
184,
190,
158,
139,
175,
148,
152,
111,
141,
153,
190,
157,
131,
149,
135,
132
)
mu <- mean(calories)
sigma <- sd(calories)
mu <- mean(calories)
sigma <- sd(calories)
alpha <- 9/10
delta <- qnorm((1 + alpha)/2, mean = mu, sd = sigma) - mu
mu - delta
mu + delta
calories <-
c(
186,
181,
176,
149,
184,
190,
158,
139,
175,
148,
152,
111,
141,
153,
190,
157,
131,
149,
135,
132
)
mu <- mean(calories)
sigma <- sd(calories)
alpha <- 1/10
delta <- qnorm((2 - alpha)/2, mean = mu, sd = sigma) - mu
mu - delta
mu + delta
