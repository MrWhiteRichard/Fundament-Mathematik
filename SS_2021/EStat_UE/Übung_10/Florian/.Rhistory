calorie_array = c(186, 181, 176, 149, 184, 190, 158, 139, 175, 148,
152, 111, 141, 153, 190, 157, 131, 149, 135, 132)
n = length(calorie_array)
MLE_mu = mean(calorie_array)
MLE_sigma = mean((calorie_array - MLE_mu)^2)
alpha = 0.1
print(MLE_mu)
print(MLE_sigma)
z_alpha = qnorm(1 - alpha/2)
confidence_interval = c(MLE_mu - z_alpha*sqrt(MLE_sigma/n), MLE_mu + z_alpha*sqrt(MLE_sigma/n))
print(confidence_interval)
sqrt(MLE_sigma)
calories <-
c(
186,
181,
176,
149,
184,
190,
158,
139,
175,
148,
152,
111,
141,
153,
190,
157,
131,
149,
135,
132
)
mu <- mean(calories)
sigma <- sd(calories)
alpha <- 1/10
delta <- qnorm((2 - alpha)/2, mean = mu, sd = sigma) - mu
mu - delta
mu + delta
calories <-
c(
186,
181,
176,
149,
184,
190,
158,
139,
175,
148,
152,
111,
141,
153,
190,
157,
131,
149,
135,
132
)
mu <- mean(calories)
n <- length(calories)
sigma <- sqrt(1/ (n - 1) sum((calories - mu)^2)
sigma <- sqrt(1/ (n - 1) sum((calories - mu)^2))
sigma <- sqrt(1/ (n - 1) * sum((calories - mu)^2))
alpha <- 1/10
delta <- - sigma / sqrt(n) * qnorm(alpha/2)
mu - delta
mu + delta
calories <-
c(
186,
181,
176,
149,
184,
190,
158,
139,
175,
148,
152,
111,
141,
153,
190,
157,
131,
149,
135,
132
)
mu <- mean(calories)
n <- length(calories)
sigma <- sqrt(1/ (n - 1) * sum((calories - mu)^2))
alpha <- 1/10
delta <- - sigma / sqrt(n) * qnorm(alpha/2)
mu - delta
mu + delta
alpha = 0.1
z = qnorm(1 - alpha/2)
calculate_confidence_interval <- function(n) {
sample = rpois(n, lambda = 1)
abs(mean(sample) - 1) < z*sqrt(mean(sample/n))
}
for (n in c(30, 100)) {
percent = sum(replicate(10000, calculate_confidence_interval(n)))/100
print(percent)
}
alpha = 0.1
z = qnorm(1 - alpha/2)
calculate_confidence_interval <- function(n) {
sample = rpois(n, lambda = 1)
abs(mean(sample) - 1) < z*sqrt(mean(sample/n))
}
for (n in c(30, 100)) {
percent = sum(replicate(10000, calculate_confidence_interval(n)))/100
print(percent)
}
k <- 10000
alpha <- 1/10
lambda <- 1
delta <- seq(1:k)
mu <- seq(1:k)
tail(delta)
n <- 30
for (i in seq(1:k)) {
x <- rpois(n, lambda)
mu[i] <- mean(x)
sigma <- sqrt(mu[i]/n)
delta[i] <- qnorm((2 - alpha)/2, mean = mu[i], sd = sigma) - mu[i]
}
res1 <- length(delta[mu - delta < 1 & 1 < mu + delta]) / length(delta)
n <- 100
for (i in seq(1:k)) {
x <- rpois(n, lambda)
mu[i] <- mean(x)
sigma <- sqrt(mu[i]/n)
delta[i] <- qnorm((2 - alpha)/2, mean = mu[i], sd = sigma) - mu[i]
}
res2 <- length(delta[mu - delta < 1 & 1 < mu + delta]) / length(delta)
alpha = 0.1
z = qnorm(1 - alpha/2)
calculate_confidence_interval <- function(n) {
sample = rpois(n, lambda = 1)
abs(mean(sample) - 1) < z*sqrt(mean(sample/n))
}
for (n in c(30, 100)) {
percent = sum(replicate(10000, calculate_confidence_interval(n)))/100
print(percent)
}
k <- 10000
alpha <- 1/10
lambda <- 1
delta <- seq(1:k)
mu <- seq(1:k)
tail(delta)
n <- 30
for (i in seq(1:k)) {
x <- rpois(n, lambda)
mu[i] <- mean(x)
sigma <- sqrt(mu[i]/n)
delta[i] <- qnorm((2 - alpha)/2, mean = mu[i], sd = sigma) - mu[i]
}
res1 <- length(delta[mu - delta < 1 & 1 < mu + delta]) / length(delta)
n <- 100
for (i in seq(1:k)) {
x <- rpois(n, lambda)
mu[i] <- mean(x)
sigma <- sqrt(mu[i]/n)
delta[i] <- qnorm((2 - alpha)/2, mean = mu[i], sd = sigma) - mu[i]
}
res2 <- length(delta[mu - delta < 1 & 1 < mu + delta]) / length(delta)
alpha = 0.1
z = qnorm(1 - alpha/2)
calculate_confidence_interval <- function(n) {
sample = rpois(n, lambda = 1)
abs(mean(sample) - 1) < z*sqrt(mean(sample/n))
}
for (n in c(30, 100)) {
percent = sum(replicate(10000, calculate_confidence_interval(n)))/100
print(percent)
}
alpha = 0.1
z = qnorm(1 - alpha/2)
calculate_confidence_interval <- function(n) {
sample = rpois(n, lambda = 1)
abs(mean(sample) - 1) < z*sqrt(mean(sample/n))
}
for (n in c(30, 100)) {
percent = sum(replicate(10000, calculate_confidence_interval(n)))/100
print(percent)
}
k <- 10000
alpha <- 1/10
lambda <- 1
delta <- seq(1:k)
mu <- seq(1:k)
tail(delta)
n <- 30
for (i in seq(1:k)) {
x <- rpois(n, lambda)
mu[i] <- mean(x)
sigma <- sqrt(mu[i]/n)
delta[i] <- - sigma * qnorm(alpha/2)
}
res1 <- length(delta[mu - delta < 1 & 1 < mu + delta]) / length(delta)
n <- 100
for (i in seq(1:k)) {
x <- rpois(n, lambda)
mu[i] <- mean(x)
sigma <- sqrt(mu[i]/n)
delta[i] <- - sigma * qnorm(alpha/2)
}
res2 <- length(delta[mu - delta < 1 & 1 < mu + delta]) / length(delta)
load("algorithms.rData")
boxplot(runningtimes, ylab = "Runtime in seconds", col = c("red", "blue"), main = "Runtimes of AlgoA and AlgoB")
setwd("Documents/Fundament-Mathematik/SS_2021/EStat_UE/Ãœbung_10/Fabian")
load("../algorithms.Rdata")
boxplot(runningtimes, ylab = "Runtime in seconds", col = c("red", "blue"), main = "Runtimes of AlgoA and AlgoB")
boxplot(
runningtimes,
ylab = "runningtime",
main = "runningtimes of two algorithms",
col = "green",
border = "blue"
)
boxplot(
runningtimes,
ylab = "runningtime",
main = "runningtimes of two algorithms",
col = c("green", "bisque"),
border = "blue"
)
boxplot(
runningtimes,
ylab = "runningtime",
main = "runningtimes of two algorithms",
col = c("lightgray", "bisque"),
border = "blue"
)
