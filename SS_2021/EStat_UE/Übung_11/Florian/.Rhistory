alpha = 0.05
alpha = 0.05
d_array = seq(-5,5,0.1)
two_sample_t_test <- function(n,d,sigma) {
X = rnorm(n, mean = 0, sd = sigma)
Y = rnorm(n, mean = d, sd = sigma)
diff = X - Y
abs(mean(diff)) > sd(diff)/sqrt(n)*qt(alpha/2, df = n - 1, lower.tail = FALSE)
}
two_sample_t_test = Vectorize(two_sample_t_test, "d")
plot(1, type = "n", xlab = "d", ylab = "Simulated power", main = "Simulated power of the two-sample t-test", xlim = c(-5,5), ylim = c(0,1))
n = 10
sigma = 3
simul_power = rowSums(replicate(1000, two_sample_t_test(n,d_array, sigma)))/1000
points(d_array, simul_power, col ="red", pch = "x")
# b)
n = 20
sigma = 3
simul_power = rowSums(replicate(1000, two_sample_t_test(n,d_array, sigma)))/1000
points(d_array, simul_power, col ="blue", pch = "x")
# c)
n = 20
sigma = 1
simul_power = rowSums(replicate(1000, two_sample_t_test(n,d_array, sigma)))/1000
points(d_array, simul_power, col ="green", pch = "x")
legend("bottomright", legend=c("n = 10, sigma = 3", "n = 20, sigma = 3", "n = 20, sigma = 1"),
col=c("red", "blue", "green"), pch = "x")
k <- 1000
n <- c(10, 20, 20)
sigma <- c(3, 3, 1)
d_vec <- seq(-5, 5, 1/2)
alpha <- 1/20
res <- seq(1:length(d_vec))
reject <- function(n, d, sigma, alpha){
x <- rnorm(n, mean = 0, sd = sigma)
y <- rnorm(n, mean = d, sd = sigma)
return(t.test(x = x, y = y, var.equal = TRUE)$p.value < alpha)
}
for (i in seq(1:3)) {
for (j in seq(1:length(d_vec))) {
res[j] <- sum(replicate(k, reject(n[i], d_vec[j], sigma[i], alpha)))/k
}
plot(d_vec, res)
}
plot(1, type = "n", xlab = "d", ylab = "Simulated power", main = "Simulated power of the two-sample t-test", xlim = c(-5,5), ylim = c(0,1))
k <- 1000
n <- c(10, 20, 20)
sigma <- c(3, 3, 1)
d_vec <- seq(-5, 5, 1/2)
alpha <- 1/20
res <- seq(1:length(d_vec))
reject <- function(n, d, sigma, alpha){
x <- rnorm(n, mean = 0, sd = sigma)
y <- rnorm(n, mean = d, sd = sigma)
return(t.test(x = x, y = y, var.equal = TRUE)$p.value < alpha)
}
plot(1, type = "n", xlab = "d", ylab = "Simulated power", main = "Simulated power of the two-sample t-test", xlim = c(-5,5), ylim = c(0,1))
farben <- c("red", "blue", "green")
for (i in seq(1:3)) {
for (j in seq(1:length(d_vec))) {
res[j] <- sum(replicate(k, reject(n[i], d_vec[j], sigma[i], alpha)))/k
}
points(d_vec, res, col = farben[i], pch = "x")
}
m1 <- 5275
s1 <- 150
m2 <- 5240
s2 <- 200
n1 <- 400
n2 <- 400
h1 <- s1 ^ 2 / n1
h2 <- s2 ^ 2 / n2
mu_hat <- m1 - m2
# a) 95% confidence interval
c(mu_hat + qnorm(alpha / 2) * sqrt(h1 + h2),
mu_hat - qnorm(alpha / 2) * sqrt(h1 + h2))
# b) two-sided p-value 0
2 * pnorm(-mu_hat / sqrt(h1 + h2))
handshake <- c(131, 74, 129, 96, 92)
high_five <- c(44, 70,  69, 43, 53)
fist_bump <- c(15, 14,  21, 29, 21)
n <- 5
mu1 <- mean(handshake)
s1 <- sd(handshake)
mu2 <- mean(high_five)
s2 <- sd(high_five)
mu3 <- mean(fist_bump)
s3 <- sd(fist_bump)
h1 <- s1 ^ 2 / n
h2 <- s2 ^ 2 / n
h3 <- s3 ^ 2 / n
nu1 <- (h1 + h2) ^ 2 / (h1 ^ 2 / (n - 1) + h2 ^ 2 / (n - 1))
alpha <- 1 / 20
# a) 95% confidence interval: handshake - high_five
nu1 <- (h1 + h2) ^ 2 / (h1 ^ 2 / (n - 1) + h2 ^ 2 / (n - 1))
c(mu1 - mu2 + qt(alpha / 2, nu1) * sqrt(h1 + h2),
mu1 - mu2 - qt(alpha / 2, nu2) * sqrt(h1 + h2))
# b) 95% confidence interval: high_five - fist_bump
nu2 <- (h2 + h3) ^ 2 / (h2 ^ 2 / (n - 1) + h3 ^ 2 / (n - 1))
c(mu2 - mu3 + qt(alpha / 2, nu2) * sqrt(h2 + h3),
mu2 - mu3 - qt(alpha / 2, nu2) * sqrt(h2 + h3))
# b) 95% confidence interval: high_five - fist_bump
nu2 <- (h2 + h3) ^ 2 / (h2 ^ 2 / (n - 1) + h3 ^ 2 / (n - 1))
c(mu2 - mu3 + qt(alpha / 2, nu2) * sqrt(h2 + h3),
mu2 - mu3 - qt(alpha / 2, nu2) * sqrt(h2 + h3))
# a) 95% confidence interval: handshake - high_five
nu1 <- (h1 + h2) ^ 2 / (h1 ^ 2 / (n - 1) + h2 ^ 2 / (n - 1))
c(mu1 - mu2 + qt(alpha / 2, nu1) * sqrt(h1 + h2),
mu1 - mu2 - qt(alpha / 2, nu2) * sqrt(h1 + h2))
